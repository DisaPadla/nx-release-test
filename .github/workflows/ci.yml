name: '[X] Release-please'
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  RELEASE_BRANCH: nx-release-please

jobs:
  create-release-please-pr:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' && github.ref_name != 'nx-release-please'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: 'main'
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'

      - name: Echo context
        run: |
          echo ${{ github.ref_name }}
          echo ${{ github.base_ref }}

      - name: Install Dependencies
        run: npm ci --include=optional

      - name: Run dry release
        shell: bash
        run: |
          output=$(npx nx release --dry-run)
          echo "output<<EOF" >> $GITHUB_ENV
          echo "$output" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 'NX Release Please'
        run: |
          git config user.name ${{ github.actor }}@noreply.github.com
          git config user.email ${{ github.actor }}@noreply.github.com
          git checkout -b ${{ env.RELEASE_BRANCH }}
          git restore .npmrc
          git commit -a -m "chore(main): release" --allow-empty
          git push origin ${{ env.RELEASE_BRANCH }} --force
          pr_number=$(gh pr list --head ${{ env.RELEASE_BRANCH }} --state open --json number --jq '.[0].number')
          if [ -z "$pr_number" ]; then
            gh pr create --title "chore(main): release" \
                         --body "${{ env.output }}" \
                         --reviewer ${{ github.actor }} \
                         --base master
          else
            gh pr edit $pr_number --body "${{ env.output }}"
          fi
          echo "PR done"
        env:
          GH_TOKEN: ${{ secrets.APP_GITHUB_TOKEN }}

  start-release-please:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    outputs:
      apps: ${{ steps.apps-version.outputs.result }}
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_BRANCH }}
          fetch-depth: 0

      - name: Install dependencies
        run: npm ci --include=optional

      - name: 'NX wet release'
        run: |
          git config user.name ${{ github.actor }}@noreply.github.com
          git config user.email ${{ github.actor }}@noreply.github.com
          git checkout ${{ env.RELEASE_BRANCH }}
          npx nx release --projects=apps/* --skip-publish
          echo "Release done"
          git push origin ${{ env.RELEASE_BRANCH }} --force
          echo "Push done"
        env:
          GH_TOKEN: ${{ secrets.APP_GITHUB_TOKEN }}

      - name: Get diff with versions
        run: |
          DIFF_OUT=$(git diff HEAD~1 HEAD -G"version")
          echo "DIFF_OUT<<EOF" >> $GITHUB_ENV
          echo "$DIFF_OUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - uses: actions/github-script@v7
        id: apps-version
        env:
          APPS_VERSIONS: ${{ env.DIFF_OUT }}
        with:
          script: |
            const script = require('./tools/findNewestGitTags.js');
            return script(process.env.APPS_VERSIONS);

  release-build:
    needs: start-release-please
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        run: echo "${{ needs.start-release-please.outputs.apps }}"

  # release-build:
  #   needs: start-release-please
  #   uses: airslateinc/docuflow-test/.github/workflows/build-and-deploy.yml@master
  #   with:
  #     GH_TOKEN: ${{ secrets.APP_GITHUB_TOKEN }}
  #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  #     NODE_VERSION: ${{ vars.NODE_VERSION }}
